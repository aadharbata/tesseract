# tesseract
#
if(NOT ${CMAKE_VERSION} VERSION_LESS "3.12.0")
  cmake_policy(SET CMP0074 NEW)
endif()

if(UNIX AND NOT ANDROID)
  set(LIB_pthread pthread)
endif()

if(SW_BUILD)
  set(ICU_FOUND 1)
else()
  find_package(PkgConfig)
endif()

# Experimental: Setting ICU for Windows builds with PkgConfig
if(MSVC AND PKG_CONFIG_FOUND AND NOT SW_BUILD AND NOT USE_SYSTEM_ICU)
  include(CheckTypeSize)
  check_type_size("void *" SIZEOF_VOID_P)

  # Determine architecture
  if(SIZEOF_VOID_P EQUAL 8)
    set(X64 1)
    set(ARCH_NAME 64)
  elseif(SIZEOF_VOID_P EQUAL 4)
    set(X86 1)
    set(ARCH_NAME 32)
  else()
    message(FATAL_ERROR "Cannot determine target architecture")
  endif()

  set(ICU_DIR "${CMAKE_CURRENT_BINARY_DIR}/icu")
  set(ICU_ARCHIVE "${ICU_DIR}/icu${ARCH_NAME}.zip")

  # Set ICU hash based on architecture
  set(ICU_HASH
      "$<IF:$<DEFINED:X86>,45167a240b60e36b59a87eda23490ce4,480c72491576c048de1218c3c5519399>")
  
  message(STATUS "Downloading latest ICU binaries")
  set(COMPILER "msvc10")
  set(ICU_URL "https://github.com/unicode-org/icu/releases/download")
  set(ICU_R "56-1")
  set(ICU_V "56_1")

  file(DOWNLOAD
       "${ICU_URL}/release-${ICU_R}/icu4c-${ICU_V}-Win${ARCH_NAME}-${COMPILER}.zip"
       "${ICU_ARCHIVE}"
       SHOW_PROGRESS
       INACTIVITY_TIMEOUT 300
       EXPECTED_HASH MD5=${ICU_HASH})

  execute_process(COMMAND ${CMAKE_COMMAND} -E tar xz "${ICU_ARCHIVE}"
                  WORKING_DIRECTORY "${ICU_DIR}"
                  RESULT_VARIABLE __result)
  if(NOT __result EQUAL 0)
    message(FATAL_ERROR "error ${__result}")
  endif()

  set(ICU_ROOT ${ICU_DIR}/icu)
endif()

if(NOT SW_BUILD)
  if(PKG_CONFIG_FOUND)
    pkg_check_modules(ICU REQUIRED IMPORTED_TARGET icu-uc icu-i18n)
  else()
    find_package(ICU 52.1 COMPONENTS uc i18n)
  endif()

  if(ICU_FOUND)
    message(">> ICU_FOUND ${ICU_FOUND} ${ICU_VERSION} ${ICU_LIBRARIES} ${ICU_INCLUDE_DIRS}")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${ICU_CXX_FLAGS}")
  else()
    message(">> ICU not found!")
  endif()
endif()

# ##############################################################################
# LIBRARY common_training
# ##############################################################################
set(COMMON_TRAINING_SRC
    common/commandlineflags.cpp
    common/commandlineflags.h
    common/commontraining.cpp
    common/commontraining.h
    common/ctc.cpp
    common/ctc.h
    common/networkbuilder.cpp
    common/networkbuilder.h)

# Conditionally add legacy engine sources
if(NOT DISABLED_LEGACY_ENGINE)
  list(APPEND COMMON_TRAINING_SRC
       common/errorcounter.cpp
       common/errorcounter.h
       common/intfeaturedist.cpp
       common/intfeaturedist.h
       common/intfeaturemap.cpp
       common/intfeaturemap.h
       common/mastertrainer.cpp
       common/mastertrainer.h
       common/sampleiterator.cpp
       common/sampleiterator.h
       common/trainingsampleset.cpp
       common/trainingsampleset.h)
endif()

add_library(common_training ${COMMON_TRAINING_SRC})
target_include_directories(common_training PUBLIC common ${CMAKE_CURRENT_BINARY_DIR})
target_link_libraries(common_training PUBLIC libtesseract)
install(TARGETS common_training
        RUNTIME DESTINATION bin
        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})

generate_export_header(common_training EXPORT_MACRO_NAME TESS_COMMON_TRAINING_API)
if (MSVC AND BUILD_SHARED_LIBS)
  install(FILES $<TARGET_PDB_FILE:common_training> DESTINATION bin OPTIONAL)
endif()

project_group(common_training "Training Tools")

# ##############################################################################
# EXECUTABLE ambiguous_words
# ##############################################################################
if(NOT DISABLED_LEGACY_ENGINE)
  add_executable(ambiguous_words ambiguous_words.cpp)
  target_link_libraries(ambiguous_words common_training)
  project_group(ambiguous_words "Training Tools")
  install(TARGETS ambiguous_words
          RUNTIME DESTINATION bin
          LIBRARY DESTINATION lib
          ARCHIVE DESTINATION lib)
  if (MSVC)
    install(FILES $<TARGET_PDB_FILE:ambiguous_words> DESTINATION bin OPTIONAL)
  endif()
endif()

# ##############################################################################
# EXECUTABLE classifier_tester
# ##############################################################################
if(NOT DISABLED_LEGACY_ENGINE)
  add_executable(classifier_tester classifier_tester.cpp)
  target_link_libraries(classifier_tester common_training)
  project_group(classifier_tester "Training Tools")
  install(TARGETS classifier_tester
          RUNTIME DESTINATION bin
          LIBRARY DESTINATION lib
          ARCHIVE DESTINATION lib)
  if (MSVC)
    install(FILES $<TARGET_PDB_FILE:classifier_tester> DESTINATION bin OPTIONAL)
  endif()
endif()

# ##############################################################################
# EXECUTABLE combine_tessdata
# ##############################################################################
add_executable(combine_tessdata combine_tessdata.cpp)
target_link_libraries(combine_tessdata common_training)
project_group(combine_tessdata "Training Tools")
install(TARGETS combine_tessdata
        RUNTIME DESTINATION bin
        LIBRARY DESTINATION lib
        ARCHIVE DESTINATION lib)
if (MSVC)
  install(FILES $<TARGET_PDB_FILE:combine_tessdata> DESTINATION bin OPTIONAL)
endif()

# ##############################################################################
# EXECUTABLE cntraining
# ##############################################################################
if(NOT DISABLED_LEGACY_ENGINE)
  add_executable(cntraining cntraining.cpp)
  target_link_libraries(cntraining common_training)
  project_group(cntraining "Training Tools")
  install(TARGETS cntraining
          RUNTIME DESTINATION bin
          LIBRARY DESTINATION lib
          ARCHIVE DESTINATION lib)
  if (MSVC)
    install(FILES $<TARGET_PDB_FILE:cntraining> DESTINATION bin OPTIONAL)
  endif()
endif()

# ##############################################################################
# EXECUTABLE dawg2wordlist
# ##############################################################################
add_executable(dawg2wordlist dawg2wordlist.cpp)
target_link_libraries(dawg2wordlist common_training)
project_group(dawg2wordlist "Training Tools")
install(TARGETS dawg2wordlist
        RUNTIME DESTINATION bin
        LIBRARY DESTINATION lib
        ARCHIVE DESTINATION lib)
if (MSVC)
  install(FILES $<TARGET_PDB_FILE:dawg2wordlist> DESTINATION bin OPTIONAL)
endif()

# ##############################################################################
# EXECUTABLE mftraining
# ##############################################################################
if(NOT DISABLED_LEGACY_ENGINE)
  add_executable(mftraining mftraining.cpp mergenf.cpp mergenf.h)
  target_link_libraries(mftraining common_training)
  project_group(mftraining "Training Tools")
  install(TARGETS mftraining
          RUNTIME DESTINATION bin
          LIBRARY DESTINATION lib
          ARCHIVE DESTINATION lib)
  if (MSVC)
    install(FILES $<TARGET_PDB_FILE:mftraining> DESTINATION bin OPTIONAL)
  endif()
endif()

# ##############################################################################
# EXECUTABLE shapeclustering
# ##############################################################################
if(NOT DISABLED_LEGACY_ENGINE)
  add_executable(shapeclustering shapeclustering.cpp)
  target_link_libraries(shapeclustering common_training)
  project_group(shapeclustering "Training Tools")
  install(TARGETS shapeclustering
          RUNTIME DESTINATION bin
          LIBRARY DESTINATION lib
          ARCHIVE DESTINATION lib)
  if (MSVC)
    install(FILES $<TARGET_PDB_FILE:shapeclustering> DESTINATION bin OPTIONAL)
  endif()
endif()

# ##############################################################################
# EXECUTABLE wordlist2dawg
# ##############################################################################
add_executable(wordlist2dawg wordlist2dawg.cpp)
target_link_libraries(wordlist2dawg common_training)
project_group(wordlist2dawg "Training Tools")
install(TARGETS wordlist2dawg
        RUNTIME DESTINATION bin
        LIBRARY DESTINATION lib
        ARCHIVE DESTINATION lib)
if (MSVC)
  install(FILES $<TARGET_PDB_FILE:wordlist2dawg> DESTINATION bin OPTIONAL)
endif()

if(ICU_FOUND)
  if(NOT SW_BUILD)
    include
